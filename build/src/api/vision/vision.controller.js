"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require('path');
const Vision = require('@google-cloud/vision');
const colors = require('colors/safe');
const config = require('../../config/config');
class Controller {
    constructor() {
    }
    respondWithResult(res, statusCode) {
        statusCode = statusCode || 200;
        return function (entity) {
            if (entity) {
                return res.status(statusCode).json(entity);
            }
            return null;
        };
    }
    handleError(res, statusCode) {
        statusCode = statusCode || 500;
        return function (err) {
            res.status(statusCode).send(err);
        };
    }
    analysePhoto(req, res) {
        console.log(colors.green('hello from api'));
        // Your Google Cloud Platform project ID
        const projectId = 'cloudapis-166021';
        // Instantiates a client
        const visionClient = Vision({
            projectId: projectId,
            keyFilename: path.normalize(`${config.rootPath}/config/CloudAPIS-748e768a7c4b.json`)
        });
        // The name of the image file to annotate
        const fileName = path.normalize(`${config.rootPath}/assets/demo-image.jpg`);
        let data;
        // Performs label detection on the image file
        visionClient.detectLabels(fileName)
            .then((results) => {
            const labels = results[0];
            data = results;
            console.log('Labels:');
            labels.forEach((label) => console.log(label));
        })
            .catch((err) => {
            console.error('ERROR:', err);
        });
        res.status(200).send(data);
        return null;
    }
}
exports.default = Controller;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcGkvdmlzaW9uL3Zpc2lvbi5jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUEsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBQy9DLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN0QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUU5QztJQUVFO0lBQ0EsQ0FBQztJQUVPLGlCQUFpQixDQUFDLEdBQWEsRUFBRSxVQUFrQjtRQUN6RCxVQUFVLEdBQUcsVUFBVSxJQUFJLEdBQUcsQ0FBQztRQUMvQixNQUFNLENBQUMsVUFBUyxNQUFXO1lBQ3pCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdDLENBQUM7WUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ2QsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVPLFdBQVcsQ0FBQyxHQUFhLEVBQUUsVUFBa0I7UUFDbkQsVUFBVSxHQUFHLFVBQVUsSUFBSSxHQUFHLENBQUM7UUFDL0IsTUFBTSxDQUFDLFVBQVMsR0FBd0I7WUFDdEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELFlBQVksQ0FBQyxHQUFZLEVBQUUsR0FBYTtRQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQzVDLHdDQUF3QztRQUN4QyxNQUFNLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztRQUVyQyx3QkFBd0I7UUFDeEIsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDO1lBQzFCLFNBQVMsRUFBRSxTQUFTO1lBQ3BCLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEscUNBQXFDLENBQUM7U0FDckYsQ0FBQyxDQUFDO1FBRUgseUNBQXlDO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSx3QkFBd0IsQ0FBQyxDQUFDO1FBQzVFLElBQUksSUFBSSxDQUFDO1FBQ1QsNkNBQTZDO1FBQzdDLFlBQVksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO2FBQ2hDLElBQUksQ0FBQyxDQUFDLE9BQVk7WUFDakIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLElBQUksR0FBRyxPQUFPLENBQUM7WUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFVLEtBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxDQUFDLEdBQVE7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVMLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7QUFuREQsNkJBbURDIiwiZmlsZSI6InNyYy9hcGkvdmlzaW9uL3Zpc2lvbi5jb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBSZXF1ZXN0LFxuICAgIFJlc3BvbnNlLFxuICAgIEVycm9yUmVxdWVzdEhhbmRsZXJcbn0gZnJvbSAnZXhwcmVzcyc7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBWaXNpb24gPSByZXF1aXJlKCdAZ29vZ2xlLWNsb3VkL3Zpc2lvbicpO1xuY29uc3QgY29sb3JzID0gcmVxdWlyZSgnY29sb3JzL3NhZmUnKTtcbmNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoJy4uLy4uL2NvbmZpZy9jb25maWcnKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udHJvbGxlciB7XG4gIHZpc2lvbjogT2JqZWN0O1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIHByaXZhdGUgcmVzcG9uZFdpdGhSZXN1bHQocmVzOiBSZXNwb25zZSwgc3RhdHVzQ29kZTogbnVtYmVyKTogRnVuY3Rpb24ge1xuICAgIHN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlIHx8IDIwMDtcbiAgICByZXR1cm4gZnVuY3Rpb24oZW50aXR5OiBhbnkpIHtcbiAgICAgIGlmIChlbnRpdHkpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoc3RhdHVzQ29kZSkuanNvbihlbnRpdHkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlRXJyb3IocmVzOiBSZXNwb25zZSwgc3RhdHVzQ29kZTogbnVtYmVyKTogRnVuY3Rpb24ge1xuICAgIHN0YXR1c0NvZGUgPSBzdGF0dXNDb2RlIHx8IDUwMDtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXJyOiBFcnJvclJlcXVlc3RIYW5kbGVyKSB7XG4gICAgICByZXMuc3RhdHVzKHN0YXR1c0NvZGUpLnNlbmQoZXJyKTtcbiAgICB9O1xuICB9XG5cbiAgYW5hbHlzZVBob3RvKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSk6IG51bGwge1xuICAgIGNvbnNvbGUubG9nKGNvbG9ycy5ncmVlbignaGVsbG8gZnJvbSBhcGknKSk7XG4gICAgLy8gWW91ciBHb29nbGUgQ2xvdWQgUGxhdGZvcm0gcHJvamVjdCBJRFxuICAgIGNvbnN0IHByb2plY3RJZCA9ICdjbG91ZGFwaXMtMTY2MDIxJztcblxuICAgIC8vIEluc3RhbnRpYXRlcyBhIGNsaWVudFxuICAgIGNvbnN0IHZpc2lvbkNsaWVudCA9IFZpc2lvbih7XG4gICAgICBwcm9qZWN0SWQ6IHByb2plY3RJZCxcbiAgICAgIGtleUZpbGVuYW1lOiBwYXRoLm5vcm1hbGl6ZShgJHtjb25maWcucm9vdFBhdGh9L2NvbmZpZy9DbG91ZEFQSVMtNzQ4ZTc2OGE3YzRiLmpzb25gKVxuICAgIH0pO1xuXG4gICAgLy8gVGhlIG5hbWUgb2YgdGhlIGltYWdlIGZpbGUgdG8gYW5ub3RhdGVcbiAgICBjb25zdCBmaWxlTmFtZSA9IHBhdGgubm9ybWFsaXplKGAke2NvbmZpZy5yb290UGF0aH0vYXNzZXRzL2RlbW8taW1hZ2UuanBnYCk7XG4gICAgbGV0IGRhdGE7XG4gICAgLy8gUGVyZm9ybXMgbGFiZWwgZGV0ZWN0aW9uIG9uIHRoZSBpbWFnZSBmaWxlXG4gICAgdmlzaW9uQ2xpZW50LmRldGVjdExhYmVscyhmaWxlTmFtZSlcbiAgICAgIC50aGVuKChyZXN1bHRzOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gcmVzdWx0c1swXTtcbiAgICAgICAgZGF0YSA9IHJlc3VsdHM7XG4gICAgICAgIGNvbnNvbGUubG9nKCdMYWJlbHM6Jyk7XG4gICAgICAgIGxhYmVscy5mb3JFYWNoKChsYWJlbDogYW55KSA9PiBjb25zb2xlLmxvZyhsYWJlbCkpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRVJST1I6JywgZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgcmVzLnN0YXR1cygyMDApLnNlbmQoZGF0YSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiJdfQ==
